{"version":3,"sources":["Message.js","global-functions/graphql-requests/editMessageMut.js","ChatRoom.js","global-functions/graphql-requests/newMessageSub.js","global-functions/graphql-requests/editMessageSub.js","global-functions/graphql-requests/messagesQuery.js","global-functions/graphql-requests/usersStatusSub.js","global-functions/graphql-requests/usersQuery.js","global-functions/graphql-requests/newMessageMut.js","App.js","index.js"],"names":["Message","props","toggleEdit","isEdited","state","message","setState","handleEdit","e","target","value","handleSend","wsConnection","id","send","JSON","stringify","collection","type","query","editMessageMut","this","prevProps","prevState","edited","date","style","display","flexDirection","flex","backgroundColor","onClick","onChange","color","Date","Number","toLocaleString","Component","ChatRoom","wsOnConnection","initMsg","wsMessageReceived","msg","console","log","data","parse","errors","updateUser","updateMessages","updateUsers","user","messages","reader","list","incomingMessages","newMessageSub","editMessageSub","messageIdx","findIndex","rest","handleEditNewMessage","newMessage","handleSendNewMessage","handleLeave","close","subName","users","incomingUsers","usersStatusSub","updatedUsers","map","item","WebSocket","onopen","onmessage","onclose","connectionId","key","status","username","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1bc5866c.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { editMessageMut } from './global-functions/graphql-requests/editMessageMut'\n\nexport default class Message extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      isEdited: false,\n      message: '',\n    }\n  }\n\n  componentDidMount() {\n    this.setState({\n      message: this.props.message,\n    })\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.message !== this.props.message) {\n      this.setState({\n        message: this.props.message,\n      })\n    }\n  }\n\n  toggleEdit = () => {\n    const { isEdited } = this.state\n    const { message } = this.props\n    this.setState({\n      isEdited: !isEdited,\n      message,\n    })\n  }\n\n  handleEdit = (e) => {\n    this.setState({\n      message: e.target.value,\n    })\n  }\n\n  handleSend = () => {\n    const { wsConnection, id } = this.props\n    const { message } = this.state\n    wsConnection.send(editMessageMut(id, message))\n    this.setState({\n      isEdited: false\n    })\n  }\n\n  render() {\n    const { edited, date } = this.props\n    const { message, isEdited } = this.state\n    if (isEdited) {\n      return (\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'row'\n          }}\n        >\n          <div style={{ flex: '1' }}>\n            <button style={{ backgroundColor: 'red' }} onClick={this.toggleEdit}>Cancel</button>\n          </div>\n          <div style={{ flex: '2' }}>\n            <input value={message} onChange={this.handleEdit} />\n          </div>\n          <div style={{ flex: '1' }}>\n            <button onClick={this.handleSend}>Send</button>\n          </div>\n        </div>\n      )\n    }\n    return (\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row'\n        }}\n      >\n        <div style={{ flex: '1' }}>\n          <button onClick={this.toggleEdit}>Edit</button>\n        </div>\n        <div style={{ flex: '3', color: '#444444' }}>{new Date(Number(date)).toLocaleString()}</div>\n        <div style={{ flex: '2' }}>{message}</div>\n        <div style={{ flex: '1' }}>\n          {\n            edited\n              ? `(edited)`\n              :null\n          }\n        </div>\n      </div>\n    )\n  }\n}\n","export const editMessageMut = (id, message) => {\n  return JSON.stringify({\n    collection: 'messages',\n    type: 'mutation',\n    query: `\n      mutation {\n        writer {\n          editMessage(id: \"${id}\", message: \"${message}\") {\n            id\n            message\n          }\n        }\n      }\n    `\n  })\n}","import React, { Component } from 'react'\n\nimport { messagesQue } from './global-functions/graphql-requests/messagesQuery';\nimport { newMessageSub } from './global-functions/graphql-requests/newMessageSub';\nimport { newMessageMut } from './global-functions/graphql-requests/newMessageMut';\nimport { usersStatusSub } from './global-functions/graphql-requests/usersStatusSub';\nimport { usersQue } from './global-functions/graphql-requests/usersQuery';\nimport { editMessageSub } from './global-functions/graphql-requests/editMessageSub';\nimport Message from './Message';\n\nexport default class ChatRoom extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      messages: [],\n      newMessage: '',\n      users: [],\n      user: {},\n      wsConnection: null,\n    }\n  }\n\n  componentDidMount() {\n    const wsConnection = new WebSocket('ws://localhost:3000/subscriptions')\n    wsConnection.onopen = (initMsg) => this.wsOnConnection(initMsg, wsConnection)\n    wsConnection.onmessage = this.wsMessageReceived\n    wsConnection.onclose = () => {\n      console.log('connection closed');  \n    }\n    this.setState({\n      wsConnection\n    })\n  }\n\n  wsOnConnection = (initMsg, wsConnection) => {\n    wsConnection.send(newMessageSub())\n    wsConnection.send(editMessageSub())\n    wsConnection.send(messagesQue())\n    wsConnection.send(usersStatusSub())\n    wsConnection.send(usersQue())\n  }\n\n  wsMessageReceived = (msg) => {\n    console.log('got ws msg:', msg);\n    const data = JSON.parse(msg.data)\n    \n    if (data.errors) {\n      console.log('got error back');\n    } else if (data.collection === 'user') {\n      this.updateUser(data.data)\n    } else if (data.collection === 'messages') {\n      this.updateMessages(data.data)\n    }  else if (data.collection === 'users') {\n      this.updateUsers(data.data)\n    }\n  }\n\n  updateUser = (data) => {\n    console.log('got user data:', data);\n    \n    this.setState({\n      user: { ...data },\n    })\n  }\n\n  updateMessages = (data) => {\n    console.log(data);\n    const { messages } = this.state\n    if (data?.reader?.messages?.list) {\n      const incomingMessages = data.reader.messages.list\n      this.setState({\n        messages: [...incomingMessages]\n      })\n    } else if (data?.newMessageSub?.message) {\n      const incomingMessages = [data.newMessageSub]\n      this.setState({\n        messages: [...messages, ...incomingMessages]\n      })\n    } else if (data?.editMessageSub?.message) {\n      const incomingMessages = [...messages]\n      const messageIdx = incomingMessages.findIndex(message => message.id === data.editMessageSub.id)\n      const { id, ...rest } = data.editMessageSub\n      incomingMessages[messageIdx] =  {\n        ...incomingMessages[messageIdx],\n        ...rest,\n      }\n      this.setState({\n        messages: [...incomingMessages]\n      })\n    }\n  }\n\n  handleEditNewMessage = (e) => {\n    this.setState({\n      newMessage: e.target.value,\n    })\n  }\n\n  handleSendNewMessage = () => {\n    const { wsConnection, newMessage } = this.state\n    wsConnection.send(newMessageMut(newMessage))\n    this.setState({\n      newMessage: '',\n    })\n  }\n\n  handleLeave = () => {\n    const { wsConnection } = this.state\n    wsConnection.send(JSON.stringify({ close: true, subName: 'newMessage' }))\n  }\n\n  updateUsers = (data) => {\n    console.log(data);\n    const { users } = this.state\n    if (data?.reader?.users?.list) {\n      const incomingUsers = data.reader.users.list\n      this.setState({\n        users: [...users, ...incomingUsers]\n      })\n    } else if (data?.usersStatusSub?.id) {\n      const updatedUsers = users.map((item) => item.id === data.usersStatusSub.id ? data.usersStatusSub : item)\n      this.setState({\n        users: [...updatedUsers]\n      })\n    }\n  }\n\n  render() {\n    const {\n      messages,\n      newMessage,\n      users,\n      user,\n      wsConnection,\n    } = this.state\n    return (\n      <div style={{ display: 'flex' }}>\n        {\n          user?.connectionId\n            ? (\n              <div>\n                user connection - {user.connectionId}\n              </div>\n            )\n            : null\n        }\n        <div style={{ flex: '1' }}>\n          {\n            users.map((item) => (\n              <p key={item.id} style={{ color: item.status === 'online' ? 'green' : 'black' }}>\n                {item.username}\n              </p>\n            ))\n          }\n        </div>\n        <div style={{ flex: '3' }}>\n          {\n            messages.map((item) => (\n              <Message key={item.id} {...item} wsConnection={wsConnection} />\n            ))\n          }\n          <div>\n            <input value={newMessage} onChange={this.handleEditNewMessage} />\n            <button onClick={this.handleSendNewMessage} style={{ backgroundColor: wsConnection ? 'green' : 'red' }}>\n              click\n            </button>\n          </div>\n          <div>\n            <button onClick={this.handleLeave} style={{ backgroundColor: wsConnection ? 'green' : 'red' }}>\n              leave\n            </button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","export const newMessageSub = () => {\n  return JSON.stringify({\n    collection: 'messages',\n    type: 'subscription',\n    query: `\n      subscription {\n        newMessageSub {\n          id\n          message\n          date\n          edited\n        }\n      }\n    `\n  })\n}","export const editMessageSub = () => {\n  return JSON.stringify({\n    collection: 'messages',\n    type: 'subscription',\n    query: `\n      subscription {\n        editMessageSub {\n          id\n          message\n          edited\n        }\n      }\n    `\n  })\n}","export const messagesQue = () => {\n  return JSON.stringify({\n    collection: 'messages',\n    type: 'query',\n    query: `\n      query {\n        reader {\n          messages {\n            list {\n              id\n              message\n              date\n              edited\n            }\n          }\n        }\n      }\n    `\n  })\n}","export const usersStatusSub = () => {\n  return JSON.stringify({\n    collection: 'users',\n    type: 'subscription',\n    query: `\n      subscription {\n        usersStatusSub {\n          id\n          username\n          status\n        }\n      }\n    `\n  })\n}","export const usersQue = () => {\n  return JSON.stringify({\n    collection: 'users',\n    type: 'query',\n    query: `\n      {\n        reader {\n          users {\n            list {\n              id\n              username\n              status\n            }\n          }\n        }\n      }\n    `\n  })\n}","export const newMessageMut = (message) => {\n  return JSON.stringify({\n    collection: 'messages',\n    type: 'mutation',\n    query: `\n      mutation {\n        writer {\n          addMessage(message: \"${message}\") {\n            message\n          }\n        }\n      }\n    `\n  })\n}","import React from 'react';\nimport ChatRoom from './ChatRoom';\n\nfunction App() {\n  return (\n    <div>\n      Welcome\n      <ChatRoom />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}